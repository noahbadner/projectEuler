# Noah Badner, 2021
#
# Highly divisible triangular number
# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
# Solution: 76576500; Runtime: O(Nlog(N))

def divisors(n):
    """Returns a set of all of the divisors of a given number n"""
    divisors_set = set()
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            divisors_set.append(i)
            if i * i != n:
                divisors_set.append(n / i)
    return divisors_set


def num_divisors(n):
    """Returns the number of divisors of a given number n"""
    divisors_count = 0
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            divisors_count += 2 if i * i != n else 1
    return divisors_count


def triangle_num_divisors(n):
    """Returns the first triangle number with more divisors than the given number n"""
    triangle_num = 0
    count = 1
    while num_divisors(triangle_num) <= n:
        triangle_num += count
        count += 1
    return triangle_num


def main():
    """Main method"""
    print(triangle_num_divisors(500))


if __name__ == "__main__":
    main()
